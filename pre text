<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pre-Text Generator</title>
    <style>
        :root {
            --bt-primary: #6200EE;
            --bt-primary-hover: #5300d6;
            --ee-primary: #009999;
            --ee-primary-hover: #007a7a;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #f4f7f9;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
        }
        .container {
            width: 100%;
            max-width: 700px;
            background-color: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transition: box-shadow 0.3s ease;
        }
        .container:hover {
            box-shadow: 0 8px 20px rgba(0,0,0,0.12);
        }
        .logo-container {
            text-align: center;
            margin-bottom: 20px;
            height: 50px;
        }
        .logo-container svg {
            height: 100%;
            width: auto;
        }
        h1 {
            color: #1a2533;
            text-align: center;
            margin-top: 0;
            margin-bottom: 25px;
        }
        label {
            display: block;
            font-weight: 600;
            color: #3b4d61;
            margin-bottom: 8px;
        }
        select, textarea, input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 1px solid #dbe2e8;
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
        }
        textarea { margin-top: 10px; height: 200px; resize: vertical; background-color: #f8f9fa; }
        button {
            display: block;
            width: 100%;
            padding: 15px;
            margin-top: 20px;
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.2s, box-shadow 0.2s;
        }
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .status { text-align: center; margin-top: 15px; color: #28a745; font-weight: 500; height: 20px; }
        .brand-selector { display: flex; justify-content: center; margin-bottom: 25px; border: 1px solid #dbe2e8; border-radius: 6px; overflow: hidden; }
        .brand-selector label {
            flex: 1;
            text-align: center;
            padding: 12px;
            margin: 0;
            cursor: pointer;
            background-color: #f8f9fa;
            color: #555;
            transition: background-color 0.2s, color 0.2s;
        }
        .brand-selector input[type="radio"] { display: none; }
        #charCounter {
            text-align: right;
            color: #555;
            font-size: 14px;
            margin-top: 5px;
            height: auto;
        }
        .feedback-text {
            text-align: center;
            margin-top: 20px;
            font-size: 14px;
            color: #6c757d;
        }
        .feedback-text a {
            text-decoration: none;
        }
        .feedback-text a:hover {
            text-decoration: underline;
        }

        /* --- Custom Search/Select Input --- */
        .custom-select-container {
            position: relative;
        }
        .scenario-dropdown {
            display: none;
            position: absolute;
            background-color: #f6f6f6;
            width: 100%;
            border: 1px solid #ddd;
            border-radius: 6px;
            z-index: 1;
            max-height: 250px;
            overflow-y: auto;
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        .scenario-dropdown.show {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }
        .scenario-dropdown div {
            padding: 12px 16px;
            cursor: pointer;
            display: block;
        }
        .scenario-dropdown div:hover { background-color: #e9e9e9; }
        
        /* --- Theme Styling --- */
        .theme-bt button { background-color: var(--bt-primary); }
        .theme-bt button:hover { background-color: var(--bt-primary-hover); }
        .theme-bt .brand-selector input[type="radio"]:checked + label { background-color: var(--bt-primary); color: white; }
        .theme-bt #logo-ee { display: none; }
        .theme-bt #logo-bt { display: block; }
        .theme-bt .feedback-text a { color: var(--bt-primary); }

        .theme-ee button { background-color: var(--ee-primary); }
        .theme-ee button:hover { background-color: var(--ee-primary-hover); }
        .theme-ee .brand-selector input[type="radio"]:checked + label { background-color: var(--ee-primary); color: white; }
        .theme-ee #logo-bt { display: none; }
        .theme-ee #logo-ee { display: block; }
        .theme-ee .feedback-text a { color: var(--ee-primary); }
    </style>
</head>
<body>

    <div class="container">
        <div class="logo-container">
            <!-- BT Logo SVG -->
            <svg id="logo-bt" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" fill="var(--bt-primary)">
                <circle cx="50" cy="50" r="48" stroke="currentColor" stroke-width="4" fill="none"/>
                <text x="50" y="68" font-family="Arial, Helvetica, sans-serif" font-size="50" font-weight="bold" text-anchor="middle" fill="currentColor">BT</text>
            </svg>
            <!-- EE Logo SVG -->
            <svg id="logo-ee" viewBox="0 0 80 40" xmlns="http://www.w3.org/2000/svg" fill="var(--ee-primary)">
                <text x="0" y="32" font-family="Arial, Helvetica, sans-serif" font-size="40" font-weight="bold" fill="currentColor">EE</text>
            </svg>
        </div>
        <h1>Pre-Text Generator</h1>

        <div class="brand-selector">
            <input type="radio" id="brandBT" name="brand" value="BT" checked>
            <label for="brandBT">BT</label>
            <input type="radio" id="brandEE" name="brand" value="EE">
            <label for="brandEE">EE</label>
        </div>

        <label for="scenarioInput">Select a pre-text reason:</label>
        <div class="custom-select-container">
            <input type="text" id="scenarioInput" placeholder="Type or click to select...">
            <div id="scenarioDropdown" class="scenario-dropdown"></div>
        </div>
        
        <textarea id="messageOutput" placeholder="Your generated message will appear here..."></textarea>
        <div id="charCounter"></div>
        
        <button id="copyButton">Copy Message</button>
        <div id="statusMessage" class="status"></div>
        <p class="feedback-text">Any feedback is welcome, please email me: <a href="mailto:calumbarnes@ee.co.uk">calumbarnes@ee.co.uk</a></p>
    </div>

<script>
    // --- Get references to all the interactive elements on the page ---
    const container = document.querySelector('.container');
    const messageOutput = document.getElementById('messageOutput');
    const copyButton = document.getElementById('copyButton');
    const statusMessage = document.getElementById('statusMessage');
    const brandRadios = document.querySelectorAll('input[name="brand"]');
    const scenarioInput = document.getElementById('scenarioInput');
    const scenarioDropdown = document.getElementById('scenarioDropdown');
    const charCounter = document.getElementById('charCounter');

    let selectedScenarioId = null;

    // --- All pre-text scenarios are stored here ---
    const scenarios = [
        {
            id: 'general_call',
            dropdownText: 'General Account Call',
            bt_template: `regarding your account. I'll try calling you in the next few minutes from an 0800 number.`,
            ee_template: `regarding your account. I'll try calling you in the next few minutes from an 0800 number.`
        },
        {
            id: 'order_issue',
            dropdownText: 'Issue With Order',
            bt_template: `we need to discuss an issue with your recent order. I'll be calling you shortly from an 0800 number to go over the details.`,
            ee_template: `we need to discuss an issue with your recent order. I'll be calling you shortly from an 0800 number to go over the details.`
        },
        {
            id: 'order_update',
            dropdownText: 'Order Progress Update',
            bt_template: `I'm calling to provide a progress update on your order. I'll try your number in the next few minutes from an 0800 number.`,
            ee_template: `I'm calling to provide a progress update on your order. I'll try your number in the next few minutes from an 0800 number.`
        },
        {
            id: 'engineer_booking',
            dropdownText: 'Book Engineer Visit',
            bt_template: `I'm calling to book in your engineer appointment to get your new service installed. I'll call you in the next few minutes from an 0800 number.`,
            ee_template: `I'm calling to book in your engineer appointment to get your new service installed. I'll call you in the next few minutes from an 0800 number.`
        },
        {
            id: 'engineer_reminder',
            dropdownText: 'Engineer Appointment Reminder',
            bt_template: `I'm calling with a quick reminder about your scheduled engineer visit. I'll be calling shortly from an 0800 number to confirm the details and answer any questions.`,
            ee_template: `I'm calling with a quick reminder about your scheduled engineer visit. I'll be calling shortly from an 0800 number to confirm the details and answer any questions.`
        },
        {
            id: 'query_follow_up',
            dropdownText: 'Follow Up On A Query',
            bt_template: `I'm following up on your recent query. I will be calling you shortly from an 0800 number to discuss this further.`,
            ee_template: `I'm following up on your recent query. I will be calling you shortly from an 0800 number to discuss this further.`
        },
        {
            id: 'complaint_follow_up',
            dropdownText: 'Follow Up On A Complaint',
            bt_template: `regarding your recent complaint. I will be calling you in the next few minutes from an 0800 number to discuss how we can resolve this for you.`,
            ee_template: `regarding your recent complaint. I will be calling you in the next few minutes from an 0800 number to discuss how we can resolve this for you.`
        }
    ];

    // --- Function to populate the dropdown list based on search ---
    function populateDropdown() {
        const searchTerm = scenarioInput.value.toLowerCase();

        // Filter scenarios based on the search term
        const filteredScenarios = scenarios.filter(scenario => 
            scenario.dropdownText.toLowerCase().includes(searchTerm)
        );

        // Sort the filtered scenarios alphabetically
        filteredScenarios.sort((a, b) => a.dropdownText.localeCompare(b.dropdownText));

        scenarioDropdown.innerHTML = ''; // Clear the current list
        
        filteredScenarios.forEach(scenario => {
            const item = document.createElement('div');
            item.textContent = scenario.dropdownText;
            item.dataset.id = scenario.id;
            item.addEventListener('click', () => {
                scenarioInput.value = scenario.dropdownText;
                selectedScenarioId = scenario.id;
                scenarioDropdown.classList.remove('show');
                generateMessage();
            });
            scenarioDropdown.appendChild(item);
        });

        // Show the dropdown if there are results
        scenarioDropdown.classList.toggle('show', filteredScenarios.length > 0);
    }
    
    // --- Function to update the theme (colors and logos) ---
    function updateTheme() {
        const selectedBrand = document.querySelector('input[name="brand"]:checked').value;
        if (selectedBrand === 'BT') {
            container.classList.add('theme-bt');
            container.classList.remove('theme-ee');
        } else {
            container.classList.add('theme-ee');
            container.classList.remove('theme-bt');
        }
    }

    // --- Main function to generate the final message ---
    function generateMessage() {
        const selectedBrand = document.querySelector('input[name="brand"]:checked').value;
        const selectedScenario = scenarios.find(s => s.id === selectedScenarioId);

        let message = '';
        if (selectedScenario) {
            message = selectedBrand === 'BT' ? selectedScenario.bt_template : selectedScenario.ee_template;
        }
        
        messageOutput.value = message;

        // Update the character counter
        updateCharCounter();
    }
    
    // --- Function to update the character and SMS counter ---
    function updateCharCounter() {
        const charLength = messageOutput.value.length;
        const smsCount = Math.ceil(charLength / 160);
        if (charLength > 0) {
            charCounter.textContent = `${charLength} characters (${smsCount} SMS)`;
        } else {
            charCounter.textContent = '';
        }
    }
    
    // --- Function to clear the current selection ---
    function clearSelection() {
        scenarioInput.value = '';
        selectedScenarioId = null;
        generateMessage();
    }

    // --- Event Listeners ---
    // Run when the page first loads
    document.addEventListener('DOMContentLoaded', () => {
        updateTheme();
        populateDropdown(); // Populate with all options initially
    });

    // When brand (BT/EE) is changed
    brandRadios.forEach(radio => radio.addEventListener('change', () => {
        updateTheme();
        generateMessage();
    }));
    
    // When typing in the search/select bar
    scenarioInput.addEventListener('input', populateDropdown);
    
    // When clicking the search/select bar
    scenarioInput.addEventListener('click', () => {
        if (scenarioInput.value !== '') {
            clearSelection();
        }
        populateDropdown();
    });
    
    // To hide the dropdown when clicking outside of it
    document.addEventListener('click', (e) => {
        if (!container.contains(e.target)) {
            scenarioDropdown.classList.remove('show');
        }
    });

    // When the "Copy Message" button is clicked
    copyButton.addEventListener('click', () => {
        if (messageOutput.value) {
            try {
                messageOutput.select();
                messageOutput.setSelectionRange(0, 99999); 
                const successful = document.execCommand('copy');
                
                if (successful) {
                    statusMessage.textContent = 'Message copied to clipboard!';
                } else {
                    statusMessage.textContent = 'Failed to copy!';
                }
                window.getSelection().removeAllRanges();

            } catch (err) {
                statusMessage.textContent = 'Failed to copy!';
                console.error('Error copying text: ', err);
            } finally {
                setTimeout(() => { statusMessage.textContent = ''; }, 2000);
            }
        }
    });
    
    // Update counter when user types in the textarea
    messageOutput.addEventListener('input', updateCharCounter);

</script>

</body>
</html>

